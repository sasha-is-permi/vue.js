	
// Создать респозиторий(место для хранения) на https://github.com/ Например, 
// 	https://github.com/sasha-is-permi/public
// Для этого надо сначала зарегистрироваться на сайте  https://github.com/ под именем,
// например, sasha-is-permi, подтвердить свою почту.
// А затем создать место хранения- нажать на New в профиле, завести Respository Name
// (выбрать- Public(открытый) или Private (закрытый) и нажать Create Respository )
 
 
// Если нет Visual studio code- можно загрузить прямо с github.com,
// зайдя в созданный профиль, затем  uploading an existing file (загрузить существующий файл),
// choose your files (выберите ваши файлы), затем нажать Commit changes (записать изменения)
// Файлы загрузились в респозиторий https://github.com/sasha-is-permi/public

// Через Visual Studio code:

// Скачать систему контроля версий git с сайта    https://git-scm.com
// Download 2.27.0 for Windows, установить её

// Зайти в Visual studio code, выбрать каталог с текущим проектом,
// открыть терминал

// git init              - отслеживание изменений в данной папке включено
// git config --local user.name "Marina"         - имя пользователя для проекта
// git config --local user.email ogonek.1987@mail.ru         - e-mail
// В каталоге .git создается файл config
// Установили локально настройки- для данного проекта. Если одни работаем
// на компьютере- можно глобально установить - для всех проектов настройки
// Вместо --local  ->    --global
// git status- за какими файлами следит git (красный цвет (статус U)- не следит за файлами)
// git add -A  - добавить все файлы к отслеживанию (зеленый цвет (статус A)- следит)
// git add main.css- добавить новый файл к отслеживанию
// или git add *.css
// Добавить все файлы в архивную копию (commit):
// git commit -a -m"1 commit"
// После этого- git не следит за файлами
// git checkout --file  - сбросить изменения, которые только что сделали-
// вернуться к предыдущему commit
// Заново включаем отслеживание изменений git add -A
// git commit -a -m"2 commit" - после изменений файлов создаем опять commit

// git log - описание commit-ов










// Соединить текущий проект с удаленным репозиторием
// git remote add origin https://github.com/sasha-is-permi/work.git

// Отправить проект на репозиторий
// git push -u origin master

// Если еще не создан commit- создаем и отправляем на репозиторий:

echo "# work" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/sasha-is-permi/work.git
git push -u origin master


// Более простой вариант:

// надо представиться если не представлялись. Один раз после создания проекта
// Информация записывается в .git/config
git init // создает git/config
git config --local user.name "Alexandr"         - имя пользователя для проекта
git config --local user.email sasha-is-permi@mail.ru         - e-mail

// После создания или изменения файлов в проекте
git add -A
git commit -m "first commit"

// Только первый раз при создании.
// Информация записывается в .git/config
git remote add origin https://github.com/sasha-is-permi/work.git
// Посылаем файлы проекта на github
// В следующий раз можно посылать файлы более простой командой:
// git push
git push -u origin master

// Повторно- если не выходили из visual studio
git add -A
git commit -m "second commit"
git push 

// master- главная ветка, -u - дальше все push будут сюда же отправляться
// Просматриваем загруженный проект. Красная строка- что было раньше.
// зеленая- что новое.

Обучение git:

https://learngitbranching.js.org/?locale=ru_RU
https://git-scm.com/book/ru/v2/Введение-О-системе-контроля-версий


Git с разных компьютеров


На удаленном компьютере скопировать с респозитория в папку Work
1 вариант) 
Code/Download Zip
2 вариант)
копируем ссылку в Code
https://github.com/sasha-is-permi/work.git
Переходим в папку Work рабочую
git clone https://github.com/sasha-is-permi/work.git project_2
// Файлы копируются с респозитория в папку project_2

// Изменили файлы на рабочем компьютере. Затем отправим обратно на github изменения
git add -A
git commit -m "second commit"
git push
// Если клонировали репозиторий на локальную машину с github
//- локальный уже связан с удаленным (это в настройках проекта 
// прописывается. Даже если вышли из программы, опять зашли- все равно
// в файле .git/config информация о пути осталась
// Дома на компьютере который связан уже с удаленным репозиторием:
 git pull - синхронизация- обновление из удаленного репозитория на локальный компьютер
// Если при отправке git push ошибка  error: filed to push, 
// то надо набрать комманду git pull (с сервера новые изменения перекачаются)
// локальный и удаленный проекты сливаются (merge)

// ctrl C два раза wq!  (если забыли git pull)

// На github- можно посмотреть commit-ы

gitignore- те файлы перечисленны, которые не надо грузить через push


Утилиты просмортра commit:

gitlens внутри vs-code

Поинтереснее утилита:
https://www.gitkraken.com
Open repo- открываем локальный репозиторий
Можем создать commit (описание заполнить, commit changes), git push- отправить
// Выбираем файлы, смотрим изменения



Первый способ изменить url репозитория:

использовать команду git remote set-url origin, например:

git remote set-url origin https://github.com/sasha-is-permi/work.git

2) Второй способ:

Отредактировать файл .git/config: секция [remote "origin"] параметр - url. 


Отмена последнего коммита
Чтобы отменить последний коммит в локальном Git репозитории, 
используется команда:

git reset HEAD~
Данная команда отменяет последний коммит.
 Файлы из данного последнего коммита переходят 
 в статус unstaged, то есть в то состояние, в котором они были до коммита.
 Если запустить команду git status,
 то эти файлы будут находиться в списке «Changes not staged for commit».
 одержимое файлов не изменяется.

Полное удаление последнего коммита
Если вы хотите полностью удалить последний коммит,
 включая все изменения файлов данного коммита, то используется команда:

git reset --hard HEAD~1




Есть ли способ не удаляя проект, удалить коммит на github?

абсолютно точный по форме ответ — нет.

а «правильный» ответ будет звучать так:

удалите этот коммит в своей локальной копии хранилища.
отправьте это изменение в общее хранилище на github, добавив
 опцию -f (--force):

git push -f
известите других пользователей этого общего хранилища,
 чтобы они и в своих локальных копиях удалили этот коммит
 (если «успели» его получить).
будьте готовы к тому, что:
из локальных хранилищ других пользователей этого общего
 хранилища данный коммит, если он ими уже получен, никуда не денется
 (без их активного вмешательства).
этот коммит опять появится в переписанной вами истории 
общего хранилища, если хоть один из других пользователей этого
 общего хранилища «успел» получить этот коммит, и, не предприняв действий
 по его удалению из своего локального хранилища, выполнит команду push.
 
 // После открытия программы Visual studio code.
 // Переходим в паапку проекта 
 cd todo
 // Изменили файлы на рабочем компьютере. 
 // Затем отправим на github изменения
git add -A
git commit -m "second commit"
git push